<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go工具链 on Amazing-Gao 实在是高</title><link>/series/go%E5%B7%A5%E5%85%B7%E9%93%BE/</link><description>Recent content in Go工具链 on Amazing-Gao 实在是高</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>amazing.gao@qq.com (AmazingGao)</managingEditor><webMaster>amazing.gao@qq.com (AmazingGao)</webMaster><copyright>Amazing-Gao — All rights reserved.</copyright><lastBuildDate>Wed, 24 Feb 2021 23:48:08 +0800</lastBuildDate><atom:link href="/series/go%E5%B7%A5%E5%85%B7%E9%93%BE/index.xml" rel="self" type="application/rss+xml"/><item><title>Go工具链之compile初探</title><link>/posts/2021/02/go/compile/</link><pubDate>Wed, 24 Feb 2021 23:48:08 +0800</pubDate><author>amazing.gao@qq.com (AmazingGao)</author><guid>/posts/2021/02/go/compile/</guid><description>在阅读 Go 源代码的过程，可以看到大量形如 //go:xxx 的注释，虽然很容易猜测到肯定是和编译相关的，但并不清晰，于是就想深入了解一下。
在日常编译可执行文件的过程中，我想大家使用最多的毫无疑问是 go build 。只需一行命令即可将庞大且复杂的项目源代码编译成可执行文件，Go 把复杂的编译过程设计的非常简单、友好。 但是其实 Go 和 C/C++ 一样，也分为 compile 和 link 两个过程，今天我们要讲的就是 compile 过程。
自举 Go 在 1.5 之前使用 C 实现编译器，在 1.5 实现了自举，也就是说 Go 的编译器是使用 Go 语言本身去实现的。 自举对编程语言来说是个里程碑，实现自举包括但不限于以下的好处：
语言通过自我编译、自我迭代，达到本身语言的真正成熟稳定 对编译器后端的优化不仅会优化以后所有编译出来的其它程序的效率，也会优化编译器本身的效率 使开发编译器的环境和使用这门语言开发的其它程序一致 摆脱其它语言的依赖和自我迭代 编译命令 Go 程序源码的编译可以通过以下命令行执行 go tool compile [flags] file...，简单来说该命令可以将同一个 package 的多个文件编译成一个 .o 文件，多个 .o 文件又可以被链接成一个可执行文件。
下面我们以一个简单的 hello world 程序来举例。
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 fmt.Println(&amp;#34;hello world&amp;#34;) 7} 执行编译命令，可以得到 main.</description></item><item><title>Go条件编译</title><link>/posts/2020/11/go/build-constraints/</link><pubDate>Fri, 13 Nov 2020 18:39:55 +0800</pubDate><author>amazing.gao@qq.com (AmazingGao)</author><guid>/posts/2020/11/go/build-constraints/</guid><description>最近在开发过程中遇到一个比较在编码上无解的问题，最终通过条件编译得到一个比较满意的方案。对于Go的条件编译，可能很多人都了解，甚至不知道。Go通过在行注释的前面编写如下代码来实现条件编译。
1// +build 条件编译的指令可能出现在任何源代码中，不止是*.go文件，可能是go汇编文件。无论是何种源文件，条件编译指令一定都出现在文件的顶部，并且在空行或者其他行注释之前。所以条件编译指令也必须在package语句之前。
编译规则 可以将 // +build 后面的内容当成一个表达式。当表达式返回true时，当前文件参与编译，反之不参与编译。
多个片段之间的空格表示它们之间是OR的关系。如下，表示GOOS值是linux或者darwin时，本文件参与编译。
1// +build linux darwin 多个片段之间的,表示它们之间是AND的关系。如下，表示GOOS值是linux且是amd64架构时，本文件参与编译。 1// +build linux,amd64 以!xxx开头的片段表示当tag xxx设置时，当前文件不参与编译。如下，表示GOOS值是linux时，本文件不参与编译。 1// +build !linux 单文件包含多个条件编译指令时，它们是AND的关系。如下，表示GOOS值是linux且是amd64架构时，本文件参与编译。 1// +build linux 2// +build amd64 一些内建的关键字。
GOOS的值，目标操作系统，如linux,darwin。 GOARCH的值，目标架构，如amd64。 编译器，gc 或者 gccgo。 cgo 如果cgo支持，编译。 gox.x 只在特定go版本进行编译，不支持beta or minor版本号的条件编译。 go build 命令的其他tag。 文件名实现条件编译。条件编译支持以下三种格式（源码文件名去除类型后缀和_test后缀后）：
*_GOOS GOOS值与文件名中的GOOS一致时参与编译。 *_GOARCH GOARCH值与文件名中的GOARCH一致时参与编译。 *_GOOS_GOARCH GOARCH,GOOS值与文件名中的GOARCH,GOOS一致时参与编译。 如 source_windows_amd64.go 该文件只在windows系统的amd64架构下进行编译。</description></item><item><title>Go工具链之godoc</title><link>/posts/2020/09/go/godoc/</link><pubDate>Sun, 27 Sep 2020 21:30:30 +0800</pubDate><author>amazing.gao@qq.com (AmazingGao)</author><guid>/posts/2020/09/go/godoc/</guid><description>在写boxgo的过程中，想要生成漂亮的godoc，发现不太熟悉godoc的用法，所以就有了本篇文章，记录一下。
Go团队非常重视文档，文档对项目的可阅读性、可维护性起到重要作用，所以写好文档变得非常重要。Go团队提供了godoc工具以帮助开发者方便、准确，容易的生成项目文档。godoc解析Go源代码（包括注释），并以HTML或纯文本格式生成文档。
生成文档 提取规则：
类型、变量、常量、函数，包都可以通过在声明的前面写注释的方法生成文档（中间不要有空行）。
1// Package doc 包注释 --- good 2package doc 3 4type ( 5 // UserType 类型注释 --- good 6 UserType string 7) 8 9var ( 10 // userType 变量注释 --- good 11 userType UserType 12) 13 14const ( 15 // Zero 常量注释 --- good 16 Zero = 0 17) 18 19// Test 函数注释 --- good 20func Test() { 21 22} 23 24 25// Test1 函数注释 --- bad（不要有空行） 26 27func Test1() { 28 29} 注释开头的字母需要与被注释的元素名称保持一致（包除外）。如函数Fprint注释开头的第一个字母也是Fprint。</description></item></channel></rss>