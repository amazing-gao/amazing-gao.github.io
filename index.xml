<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Amazing-Gao 实在是高</title><link>/</link><description>Recent content on Amazing-Gao 实在是高</description><generator>Hugo 0.76.5 -- gohugo.io</generator><language>zh-cn</language><managingEditor>amazing.gao@qq.com (AmazingGao)</managingEditor><webMaster>amazing.gao@qq.com (AmazingGao)</webMaster><copyright>Amazing-Gao — All rights reserved.</copyright><lastBuildDate>Wed, 14 Oct 2020 20:30:39 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Go设计模式之Factory</title><link>/posts/2020/10/factory/</link><pubDate>Wed, 14 Oct 2020 20:30:39 +0800</pubDate><author>amazing.gao@qq.com (AmazingGao)</author><guid isPermaLink="true">/posts/2020/10/factory/</guid><description>&lt;h1 id="factory---工厂模式">Factory - 工厂模式&lt;/h1>
&lt;p>工厂模式在Go中使用的非常广泛，比如常用于数据的读写模块。假设我们需要从某种介质中读取数据，并将更新后的结果保存到该介质中。考虑到以后可能更换为其他类型的介质，为了避免日后更换介质而大面积变更代码，我们就会用到本模式。&lt;/p>
&lt;h1 id="实现">实现&lt;/h1>
&lt;h2 id="1定义工厂方法所创建对象的接口">1.定义工厂方法所创建对象的接口&lt;/h2>
&lt;p>假设我们的存储模块只有&lt;strong>Read&lt;/strong>和&lt;strong>Write&lt;/strong>两个功能，我们需要先定义存储器&lt;strong>inteface&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;io&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#66d9ef">error&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2实现对象接口">2.实现对象接口&lt;/h2>
&lt;p>假设我们需要将Redis或磁盘作为存储介质，我们需要分别实现Redis与磁盘的存储功能。&lt;/p>
&lt;h3 id="filesystem">FileSystem&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">pacakge&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FileStore&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FileStore&lt;/span>) &lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FileStore&lt;/span>) &lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;span style="color:#75715e">// 注意这里要返回 Store 接口，而不是FileStore的指针。
&lt;/span>&lt;span style="color:#75715e">// 可以保证工厂方法只能调用到对象接口方法，避免封装被破坏。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newFileStore&lt;/span>() &lt;span style="color:#a6e22e">Store&lt;/span> {
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="redis">Redis&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">pacakge&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RedisStore&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RedisStore&lt;/span>) &lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RedisStore&lt;/span>) &lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;span style="color:#75715e">// 注意这里要返回 Store 接口，而不是RedisStore的指针。
&lt;/span>&lt;span style="color:#75715e">// 可以保证工厂方法只能调用到对象接口方法，避免封装被破坏。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newRedisStore&lt;/span>() &lt;span style="color:#a6e22e">Store&lt;/span> {
&lt;span style="color:#75715e">/*your codes*/&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3实现工厂方法">3.实现工厂方法&lt;/h2>
&lt;p>工厂方法是暴露给模块外部使用的，用于创建实例的方法。我们需要将各种类型&lt;strong>Store&lt;/strong>实例的创建过程封装到该方法里面，避免暴露给外部模块。由工厂方法统一提供创建功能。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">pacakge&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> (
&lt;span style="color:#a6e22e">StoreType&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
)
&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">File&lt;/span> &lt;span style="color:#a6e22e">StorageType&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">iota&lt;/span>
&lt;span style="color:#a6e22e">Redis&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewStore&lt;/span>(&lt;span style="color:#a6e22e">storeType&lt;/span> &lt;span style="color:#a6e22e">StoreType&lt;/span>) &lt;span style="color:#a6e22e">Store&lt;/span> {
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">storeType&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">File&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">newFileStore&lt;/span>()
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">Redis&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">newRedisStore&lt;/span>()
&lt;span style="color:#66d9ef">default&lt;/span>:
panic(&lt;span style="color:#e6db74">&amp;#34;尚未支持的存储类型！&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="使用">使用&lt;/h1>
&lt;p>假设我们需要使用&lt;strong>Redis&lt;/strong>作为存储介质，我们只需要在工厂方法中传入&lt;strong>store.Redis&lt;/strong>参数。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;xxxx/store&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 你的模块地址
&lt;/span>&lt;span style="color:#75715e">&lt;/span>)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">st&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">NewStore&lt;/span>(&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Redis&lt;/span>)
&lt;span style="color:#75715e">// 读取数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">st&lt;/span>.&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/foo&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;span style="color:#75715e">// 保存数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">st&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/foo&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果现在我们想更换介质为文件系统，我们只需要更换工厂方法中传入的参数为&lt;strong>store.File&lt;/strong>即可完成介质更换。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 其他代码不变
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// 工厂方法的参数更改为store.File即可。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">st&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">NewStore&lt;/span>(&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">File&lt;/span>)
&lt;span style="color:#75715e">// 其他代码不变
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go设计模式之Singleton</title><link>/posts/2020/09/go-patterns/singleton/</link><pubDate>Wed, 30 Sep 2020 22:40:58 +0800</pubDate><author>amazing.gao@qq.com (AmazingGao)</author><guid isPermaLink="true">/posts/2020/09/go-patterns/singleton/</guid><description>&lt;h1 id="singleton---单例模式">Singleton - 单例模式&lt;/h1>
&lt;p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;/p>
&lt;h1 id="实现">实现&lt;/h1>
&lt;h2 id="饿汉式">饿汉式&lt;/h2>
&lt;p>饿汉式单例是指在方法调用前，实例就已经创建好了。&lt;/p>
&lt;p>按照&lt;strong>用法&lt;/strong>使用，可以看到控制台输出10次单例的内存地址是一样的。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">type&lt;/span> (
&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
)
&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">instance&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>{}
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getServerSingleton&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">instance&lt;/span>
}
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182ec0
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="懒汉式---非goroutine安全">懒汉式 - 非Goroutine安全&lt;/h2>
&lt;p>懒汉式单例是指在方法调用获取实例时才创建实例，因为相对饿汉式显得“不急迫”，所以被叫做“懒汉模式”。&lt;/p>
&lt;p>按照&lt;strong>用法&lt;/strong>使用，可以看到控制台输出10次单例的内存地址并不完全一样。&lt;/p>
&lt;p>一共有以下3个指针：&lt;/p>
&lt;ul>
&lt;li>0xc0000c4000&lt;/li>
&lt;li>0xc0000ca000&lt;/li>
&lt;li>0xc0000c2000&lt;/li>
&lt;/ul>
&lt;p>可见此懒汉模式不支持在实例未初始化时高并发调用。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> (
&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
)
&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">instance&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getServerSingleton&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">instance&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">instance&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>{}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">instance&lt;/span>
}
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000c4000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000ca000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000c4000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000c2000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000c2000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000ca000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000ca000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000ca000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000ca000
&lt;/span>&lt;span style="color:#75715e">server ptr: 0xc0000ca000
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="懒汉式---goroutine安全">懒汉式 - Goroutine安全&lt;/h2>
&lt;p>我们可以利用golang sync包提供的Once结构体来解决Goroutine安全问题。Once提供了在应用程序生命周期中仅会被调用一次的解决方案。我们将实例的生成过程使用Once保护起来，那么即可以做到单例。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;sync&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">type&lt;/span> (
&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
)
&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">instance&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>
&lt;span style="color:#a6e22e">once&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Once&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getServerSingleton&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span> {
&lt;span style="color:#a6e22e">once&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">instance&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>{}
})
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">instance&lt;/span>
}
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">server ptr: 0x1182f88
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="用法">用法&lt;/h1>
&lt;p>模拟10个并发请求获取单例。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">wg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">WaitGroup&lt;/span>{}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">index&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">index&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">wg&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Millisecond&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>)
&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getServerSingleton&lt;/span>()
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;server ptr: %p \n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">server&lt;/span>)
&lt;span style="color:#a6e22e">wg&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>()
}()
}
&lt;span style="color:#a6e22e">wg&lt;/span>.&lt;span style="color:#a6e22e">Wait&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go工具链之godoc指南</title><link>/posts/2020/09/godoc/</link><pubDate>Sun, 27 Sep 2020 21:30:30 +0800</pubDate><author>amazing.gao@qq.com (AmazingGao)</author><guid isPermaLink="true">/posts/2020/09/godoc/</guid><description>&lt;p>在写&lt;a href="https://github.com/boxgo/box">boxgo&lt;/a>的过程中，想要生成漂亮的godoc，发现不太熟悉godoc的用法，所以就有了本篇文章，记录一下。&lt;/p>
&lt;p>Go团队非常重视文档，文档对项目的可阅读性、可维护性起到重要作用，所以写好文档变得非常重要。Go团队提供了&lt;code>godoc&lt;/code>工具以帮助开发者方便、准确，容易的生成项目文档。&lt;code>godoc&lt;/code>解析Go源代码（包括注释），并以HTML或纯文本格式生成文档。&lt;/p>
&lt;h1 id="生成文档">生成文档&lt;/h1>
&lt;p>提取规则：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>类型、变量、常量、函数，包都可以通过在声明的前面写注释的方法生成文档（中间不要有空行）。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Package doc 包注释 --- good
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">doc&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> (
&lt;span style="color:#75715e">// UserType 类型注释 --- good
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">UserType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
)
&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#75715e">// userType 变量注释 --- good
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">userType&lt;/span> &lt;span style="color:#a6e22e">UserType&lt;/span>
)
&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#75715e">// Zero 常量注释 --- good
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Zero&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
)
&lt;span style="color:#75715e">// Test 函数注释 --- good
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span>() {
}
&lt;span style="color:#75715e">// Test1 函数注释 --- bad（不要有空行）
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Test1&lt;/span>() {
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>注释开头的字母需要与被注释的元素名称保持一致（&lt;code>包&lt;/code>除外）。如函数&lt;code>Fprint&lt;/code>注释开头的第一个字母也是&lt;code>Fprint&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Fprint formats using the default formats for its operands and writes to w.
&lt;/span>&lt;span style="color:#75715e">// Spaces are added between operands when neither is a string.
&lt;/span>&lt;span style="color:#75715e">// It returns the number of bytes written and any write error encountered.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Fprint&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>doc.go&lt;/code> - 包注释比较多的话也可以使用单独的&lt;code>doc.go&lt;/code>来编写文档。参考&lt;a href="https://golang.org/src/encoding/gob/doc.go">gob package&amp;rsquo;s doc&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>BUG(who)&lt;/code> - 注释与被注释主体之间通常不能有空行或者空注释，但是&lt;code>BUG(who)&lt;/code>是一个例外，&lt;code>BUG&lt;/code>将在godoc的文档中展示。参考：&lt;a href="https://golang.org/pkg/bytes/#pkg-note-BUG">bytes package&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Title treats s as UTF-8-encoded bytes and returns a copy with all Unicode letters that begin
&lt;/span>&lt;span style="color:#75715e">// words mapped to their title case.
&lt;/span>&lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">// BUG(rsc): The rule Title uses for word boundaries does not handle Unicode punctuation properly.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Title&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) []&lt;span style="color:#66d9ef">byte&lt;/span> {
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>Deprecated&lt;/code> - 可以描述struct field, function, type, variable, const甚至是package，表示被弃用，后续不再使用，但必须保持兼容性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多个相邻的注释行，生成文档时被视为一个段落，如果想要生成多个段落，请留空行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>预格式文本需要相对上下文的注释有缩进。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>URL无需标记，文档中也会被转换成URL。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="查看文档">查看文档&lt;/h1>
&lt;p>几行代码带你查看你项目的godoc。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># 进入你的项目源代码目录&lt;/span>
cd $your_project_dir
&lt;span style="color:#75715e"># 为项目建立软连接，因为godoc目前对go mod支持的不是很好，所以需要将项目软链到GOPATH内。如果你的项目在GOPATH目录中，跳过此步骤。&lt;/span>
ln -s $your_project_dir $GOPATH/src/$your_module_path
&lt;span style="color:#75715e"># 启动godoc服务&lt;/span>
godoc -http&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;:6060&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># mac下查看文档。其他操作系统请打开浏览器访问。&lt;/span>
open http://127.0.0.1:6060/pkg/$your_module_path
&lt;/code>&lt;/pre>&lt;/div>&lt;p>效果图&lt;/p>
&lt;p>&lt;img src="/posts/godoc/image-20200928161749381.png" alt="image-20200928161749381">&lt;/p>
&lt;h1 id="参考文档">参考文档&lt;/h1>
&lt;p>&lt;a href="https://pkg.go.dev/golang.org/x/tools/cmd/godoc">godoc command&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.golang.org/godoc">godoc blog&lt;/a>&lt;/p></description></item><item><title/><link>/about/</link><pubDate>Sat, 26 Sep 2020 21:30:30 +0800</pubDate><author>amazing.gao@qq.com (AmazingGao)</author><guid isPermaLink="true">/about/</guid><description>&lt;p>喜欢倒腾的backend coder，常用Go/Node.Js/C/C++，对系统架构的设计与实现、微服务、ServiceMesh、DevOps、操作系统以及常用中间件略知一二。&lt;/p>
&lt;p>喜欢解决问题的感觉，自认为是一个Problem slover，包括但不限于CS方向。如果觉得有必要，会不断优化争取把事情做到满意。&lt;/p>
&lt;p>对技术有一点点小追求，偶尔在业务和产品方面也有一点点小想法，希望可以做出牛X的产品，为大家解决一些问题或者带来一些快乐。&lt;/p>
&lt;h1 id="经历">经历&lt;/h1>
&lt;ul>
&lt;li>2013-2015 某安全公司 网络取证 C++/Node.js&lt;/li>
&lt;li>2015-至今 某十大券商 互联网金融 Go/Node.js&lt;/li>
&lt;/ul>
&lt;h1 id="联系我">联系我&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/amazing-gao">Github&lt;/a>&lt;/li>
&lt;li>Email: &lt;a href="mailto:amazing.gao@qq.com">amazing.gao@qq.com&lt;/a>&lt;/li>
&lt;li>Wechat: amazing-gao&lt;/li>
&lt;/ul></description></item></channel></rss>